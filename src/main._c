/******************************************/
/*           广州旭东阪田电子有限公司     */
/*Project:     串口调试与LabVIEW通信      */
/*Guest:                                  */
/*Name:             main.c                */
/*Mcu chip:         Atmega64              */
/*Main clock:       外部晶体11.0592MHz    */
/*Rtc clock:                              */
/*Author:           Jack.Fu               */
/*Create date:      2010.07.09            */
/*Design date:                            */
/*Complete date:                          */
/******************************************/
#include <iom64v.h>
#include <stdio.h>
#include <macros.h>
#include <port.h>
#include <default.h>
#include <delay.h>
#include <12864_LCD.h>
#include <beep.h>
#include <eeprom.h>


/*=========================================*/
/********变量定义 start*********************/
//key
uchar key_temp=0;
uchar key_now=0;
uchar key_code=0;
uchar key_old=0;
uchar key_cnt=0;
uchar key_auto_counter=0;
uchar key_men_counter=0;

/********变量定义 end***********************/
/*=========================================*/


/*============================================================*/	
/***********USART0接收中断服务函数 start**********************/ 
//USART接收缓冲区
#define RX_BUFFER_SIZE 8                  //接收缓冲区大小，可根据需要修改。
unsigned char rx_buffer[RX_BUFFER_SIZE];     //定义接收缓冲区
unsigned char rx_counter=0;//定义rx_counter为存放在队列中的已接收到字符个数。

//定义一个标志位Usart0_RECVFlag1:=1表示串口0接收到了一个完整的数据包
//在port.h中定义
#pragma interrupt_handler usart0_rxc_isr:19  //接收中断服务程序
void usart0_rxc_isr(void)
{
    uchar status,data;
    status=UCSR0A;
    data=UDR0;
	if((flag1&(1<<Usart0_RECVFlag1))==0)//判断是否允许接收一个新的数据包
	{
		if ((status & (USART0_FRAMING_ERROR | USART0_PARITY_ERROR | USART0_DATA_OVERRUN))==0)
        {
            rx_buffer[rx_counter] = data;
            rx_counter++;
            switch (rx_counter)
            {
                case 1: {     // 检验起始字符
							if (data != USART_BEGIN_TEXT) rx_counter = 0;
						}break;
				case 2: {    
							if (data != 's') rx_counter = 0;
						}break;
				case 4: {     
							if (data != 'e') rx_counter = 0;
						}break;
				case 5: {     
							if (data != 'p') rx_counter = 0;
						}break;
                case 8: {    // 检验结束字符
							rx_counter = 0;
							if (data == USART_END_TEXT) set_bit(flag1,Usart0_RECVFlag1);// Usart0_RecvFlag=1，表示正确接收到一个数据包
						}break;   
				default:break;
            }
        }
	}
}
/***********USART0接收中断服务函数 end**********************/ 
/*============================================================*/

/*============================================================*/	
/***********USART0发送中断服务函数 start**********************/ 
#define TX_BUFFER_SIZE 8    
unsigned char tx_buffer[TX_BUFFER_SIZE];  
unsigned char tx_wr_index=0,tx_rd_index=0,tx_counter=0;

#pragma interrupt_handler usart0_txc_isr:21  //发送中断服务程序
void usart0_txc_isr(void)
{
    if (tx_counter)//队列不为空
    {
        --tx_counter;//出队列
        UDR0=tx_buffer[tx_rd_index];
        if (++tx_rd_index == TX_BUFFER_SIZE) tx_rd_index=0;
    }
}
/***********USART0发送中断服务函数 end**********************/ 
/*============================================================*/

/*============================================================*/
/***********USART0发送一个字符函数 start**********************/ 
void USART0_putchar(unsigned char c)
{
    while (tx_counter == TX_BUFFER_SIZE);
    CLI();//#asm("cli")
    if (tx_counter || ((UCSR0A & USART0_DATA_REGISTER_EMPTY)==0))//发送缓冲器不为空
    {
        tx_buffer[tx_wr_index]=c;//数据进入队列
        if (++tx_wr_index == TX_BUFFER_SIZE) tx_wr_index=0;//队列已满
        ++tx_counter;
    }
    else
        UDR0=c;
    SEI(); //#asm("sei")
}

/***********USART0发送服务函数 end**********************/ 
/*============================================================*/


/*============================================================*/	
/***************USART01初始化函数 start*************************/ 
void init_usart0(void)
{
    UCSR0B = 0x00; 
    UCSR0C = (1<<UCSZ01)|(1<<UCSZ00);        //异步，8位数据，无奇偶校验，一个停止位，无倍速 
    UBRR0L = BAUD_L;                        //设定波特率 
    UBRR0H = BAUD_H; 
    UCSR0A = 0x00; 
    UCSR0B = (1<<RXCIE0)|(1<<TXCIE0)|(1<<RXEN0)|(1<<TXEN0); //0XD8  接收、发送使能， 开中断使能
}
/***************USART0初始化函数 end***************************/ 
/*============================================================*/

/*============================================================*/
/***************USART1的所有函数 start*************************/
//******USART1初始化函数 start
void init_usart1(void)
{
	UCSR1A = 0x00;
    UCSR1B = 0x00; 
	UCSR1C = 0x00;  //串口1不用
}
//******USART1初始化函数 end 
	
/*---------------------------------------------*/
/***************系统初始化函数 start ***********/
void init_cpu(void)
{
    EIMSK = 0x00; //屏蔽INT0~INT1的所有外部中断
    clr_bit(SFIOR,PUD); //设置输入上拉电阻有效
    DDRA=0xff;//1是输出，0是输入
    PORTA=0x00; //LCD的数据口
    DDRB=0xff;  //1是输出，0是输入
    relay_1_8_PORT=0x00; //8个继电器输出
    DDRC=0xff; //
    relay_9_16_PORT=0x00;  //8个继电器输出
    DDRD  = 0xcb; //RXD1输入，且上拉有效  
	PORTD = 0x74;  //TXD1输出。
	DDRE =0xfe;  //RXD0输入，且上拉有效
	PORTE =0x01;  //TXD0输出
	DDRF =0xff;
	PORTF =0x00; //8个继电器输出
	DDRG =0x07;
	PORTG =0x00;

	init_usart0();
	init_usart1();
	
	SEI();

    flag1=0;
    flag2=0;
    flag3=0;
    flagerr=0;
}
/***************系统初始化函数 end *************/
/*---------------------------------------------*/

/*---------------------------------------------*/
/***************按键检测函数 start *************/
void key_scan(void)
{
    if((flag1&(1<<keyprq_flag1))==0)
    {
        if((PIND&(1<<key1))==0) key_now=1;  //autodc按键
        else if((PIND&(1<<key2))==0) key_now=2;  //men按键
			 else 
			   {
					key_now=0;
					key_code=0;
					key_old=0;
			   }
        if(key_now!=0)
        {
            if(key_now!=key_code)
            {
                key_code=key_now;
                key_cnt=0;
            }
            else
            {
                key_cnt++;
                if(key_cnt>=8) 
                {
                    key_cnt=0;
                    set_bit(flag1,keyprq_flag1);
                }
            }
        }
    }
}
/***************按键检测函数 end ***************/
/*---------------------------------------------*/

/*---------------------------------------------*/
/***************按键处理函数 start *************/
void key_process(void)
{
	if((flag1&(1<<keyprq_flag1))!=0)
    {
        clr_bit(flag1,keyprq_flag1);
        if(key_code==key_old)
        {
            ;
        }
        else
        {
            key_old=key_code;
            set_bit(flag1,keyeff_flag1);
        }
        if((flag1&(1<<keyeff_flag1))!=0)
        {
            clr_bit(flag1,keyeff_flag1);
            switch(key_old)
            {
			    case 1: {  
							
						}break;
                case 2: { 
							
						}break;
				default:break;
            }
        }
    }
}
/***************按键处理函数 end ***************/
/*---------------------------------------------*/

/*---------------------------------------------*/
/***************主函数 start *******************/
void main(void)
{
	uchar n=0;
    init_cpu();
    init_lcd();
    delay_nms(20);
    DispWelcome();
	beeperr3();
    delay_nms(300);
	Disp_Autokey();
	while(1)
    {
        //key_scan();
        //key_process();
		//delay_nms(5);
		if((flag1&(1<<Usart0_RECVFlag1))!=0)//if (Usart0_RecvFlag)
        {                       // 有刚接收到数据包需要处理
            switch (rx_buffer[2])   // 数据包处理过程
            {
                case 't':	{
								displayline(LINE3,"EEEEEE          ");
								displayline(LINE4,"FFFFFFFFFFFFFFFF");
							}break;
                case 'v':  {
								displayline(LINE3,"1234567890123456");
								displayline(LINE4,"ABCDEFGHIJKLMNOP");
								USART0_putchar(USART_BEGIN_TEXT);    // 发送回送数据包
								USART0_putchar(0X20);
								USART0_putchar(0X20);
								USART0_putchar(0X21);
								USART0_putchar(USART_END_TEXT);
							}break;
                default:break;
            }
            clr_bit(flag1,Usart0_RECVFlag1);          // 允许接收下一个数据包               
        }
	}
}
/***************主函数 end *********************/
/*---------------------------------------------*/


